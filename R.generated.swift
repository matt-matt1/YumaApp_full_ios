////
//// This is a generated file, do not edit!
//// Generated by R.swift, see https://github.com/mac-cain13/R.swift
////
//
//import Foundation
//import Rswift
//import UIKit
//
///// This `R` struct is generated and contains references to static resources.
//struct R: Rswift.Validatable {
//  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
//  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
//  
//  static func validate() throws {
//    try font.validate()
//    try intern.validate()
//  }
//  
//  /// This `R.color` struct is generated, and contains static references to 0 colors.
//  struct color {
//    fileprivate init() {}
//  }
//  
//  /// This `R.file` struct is generated, and contains static references to 1 files.
//  struct file {
//    /// Resource file `FontAwesome.ttf`.
//    static let fontAwesomeTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FontAwesome", pathExtension: "ttf")
//    
//    /// `bundle.url(forResource: "FontAwesome", withExtension: "ttf")`
//    static func fontAwesomeTtf(_: Void = ()) -> Foundation.URL? {
//      let fileResource = R.file.fontAwesomeTtf
//      return fileResource.bundle.url(forResource: fileResource)
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.font` struct is generated, and contains static references to 1 fonts.
//  struct font: Rswift.Validatable {
//    /// Font `FontAwesome`.
//    static let fontAwesome = Rswift.FontResource(fontName: "FontAwesome")
//    
//    /// `UIFont(name: "FontAwesome", size: ...)`
//    static func fontAwesome(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: fontAwesome, size: size)
//    }
//    
//    static func validate() throws {
//      if R.font.fontAwesome(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome' could not be loaded, is 'FontAwesome.ttf' added to the UIAppFonts array in this targets Info.plist?") }
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.image` struct is generated, and contains static references to 4 images.
//  struct image {
//    /// Image `home-slider-cartridges`.
//    static let homeSliderCartridges = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-slider-cartridges")
//    /// Image `home-slider-laptops`.
//    static let homeSliderLaptops = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-slider-laptops")
//    /// Image `home-slider-printers`.
//    static let homeSliderPrinters = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-slider-printers")
//    /// Image `logo`.
//    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
//    
//    /// `UIImage(named: "home-slider-cartridges", bundle: ..., traitCollection: ...)`
//    static func homeSliderCartridges(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.homeSliderCartridges, compatibleWith: traitCollection)
//    }
//    
//    /// `UIImage(named: "home-slider-laptops", bundle: ..., traitCollection: ...)`
//    static func homeSliderLaptops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.homeSliderLaptops, compatibleWith: traitCollection)
//    }
//    
//    /// `UIImage(named: "home-slider-printers", bundle: ..., traitCollection: ...)`
//    static func homeSliderPrinters(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.homeSliderPrinters, compatibleWith: traitCollection)
//    }
//    
//    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
//    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
//  struct nib {
//    /// Nib `ContactUsViewController`.
//    static let contactUsViewController = _R.nib._ContactUsViewController()
//    /// Nib `PrintersViewController`.
//    static let printersViewController = _R.nib._PrintersViewController()
//    /// Nib `header`.
//    static let header = _R.nib._header()
//    
//    /// `UINib(name: "ContactUsViewController", in: bundle)`
//    static func contactUsViewController(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.contactUsViewController)
//    }
//    
//    /// `UINib(name: "PrintersViewController", in: bundle)`
//    static func printersViewController(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.printersViewController)
//    }
//    
//    /// `UINib(name: "header", in: bundle)`
//    static func header(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.header)
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
//  struct reuseIdentifier {
//    fileprivate init() {}
//  }
//  
//  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
//  struct segue {
//    fileprivate init() {}
//  }
//  
//  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
//  struct storyboard {
//    /// Storyboard `LaunchScreen`.
//    static let launchScreen = _R.storyboard.launchScreen()
//    
//    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
//    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
//      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
//  struct string {
//    fileprivate init() {}
//  }
//  
//  fileprivate struct intern: Rswift.Validatable {
//    fileprivate static func validate() throws {
//      try _R.validate()
//    }
//    
//    fileprivate init() {}
//  }
//  
//  fileprivate class Class {}
//  
//  fileprivate init() {}
//}
//
//struct _R: Rswift.Validatable {
//  static func validate() throws {
//    try storyboard.validate()
//  }
//  
//  struct nib {
//    struct _ContactUsViewController: Rswift.NibResourceType {
//      let bundle = R.hostingBundle
//      let name = "ContactUsViewController"
//      
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
//      }
//      
//      fileprivate init() {}
//    }
//    
//    struct _PrintersViewController: Rswift.NibResourceType {
//      let bundle = R.hostingBundle
//      let name = "PrintersViewController"
//      
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
//      }
//      
//      fileprivate init() {}
//    }
//    
//    struct _header: Rswift.NibResourceType {
//      let bundle = R.hostingBundle
//      let name = "header"
//      
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XibView? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XibView
//      }
//      
//      fileprivate init() {}
//    }
//    
//    fileprivate init() {}
//  }
//  
//  struct storyboard: Rswift.Validatable {
//    static func validate() throws {
//      try launchScreen.validate()
//    }
//    
//    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
//      typealias InitialController = UIKit.UIViewController
//      
//      let bundle = R.hostingBundle
//      let name = "LaunchScreen"
//      
//      static func validate() throws {
//        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
//      }
//      
//      fileprivate init() {}
//    }
//    
//    fileprivate init() {}
//  }
//  
//  fileprivate init() {}
//}

